# AIエージェント文書要約・Q&Aアプリ設計書

## 1. プロジェクト概要

### 1.1 目的
論文などの専門文書をアップロードし、3つのAIエージェントによる要約とQ&Aセッションを通じて理解を深めるStreamlitアプリケーション。

### 1.2 主要機能
- PDFドキュメントのアップロード・解析
- AIエージェントによる要約生成
- リアルタイムQ&Aセッションの表示
- 最終レポートのマークダウン生成・表示

## 2. 技術仕様

### 2.1 使用技術
- **フレームワーク**: Streamlit
- **AI Framework**: Semantic Kernel 1.36.0 (Python)
- **LLM**: GPT-5 (OpenAI API)
- **言語**: Python
- **ファイル形式**: PDF (最大50MB)
- **トークン制限**: 250,000トークン以内

### 2.2 処理方式
- PDFからテキスト + 画像の両方を抽出
- 図表も含めて全内容をLLMに送信（Vision機能使用）
- ストリーミング形式でリアルタイム表示

### 2.3 Semantic Kernelの役割
- LLMサービスとの連携
- エージェントの定義とオーケストレーション
- チャット履歴の管理

## 3. エージェント仕様

### 3.1 生徒エージェント (Student Agent)
- **役割**: 質問を生成する
- **性格**: 好奇心旺盛、素直、知識欲がある（参考書でよく見る生徒役のイメージ）
- **知識レベル**: 専門的な知識がない
- **質問戦略**: 
  - 文書を設定ターン数で均等分割
  - 各セクションから1問生成
  - 文書の順序通りに質問
- **フォローアップ質問**: 
  - 先生の回答が専門的すぎる場合に追加質問
  - 専門度が閾値を超えた時に発動
  - セクションあたり最大3回まで

### 3.2 先生エージェント (Teacher Agent)
- **役割**: 質問に回答する
- **専門性**: あらゆる専門的な内容に精通（全分野対応）
- **回答スタイル**: どんな質問にも答えてくれる専門家
- **特徴**: 詳細かつわかりやすい説明を提供

### 3.3 要約・整形エージェント (Summarizer Agent)
- **役割**: 
  - 文書全体を短く要約
  - 生徒と先生の質問を綺麗に整形してまとめる
  - 最終的なマークダウン形式のアウトプットを生成

## 4. UI仕様

### 4.1 画面構成（タブ切り替え式）
- **タブ1: 要約・Q&Aセッション**
  - 上部: まとめ役による文書要約表示
  - 下部: 生徒と先生がストリーミングでQ&Aしている様子
- **タブ2: 最終レポート**
  - まとめ役が整形した最終マークダウンレポート
  - マークダウンをコンパイルした形で表示
  - コピーボタン付き

### 4.2 操作フロー
1. PDFファイルを1つアップロード
2. Q&Aターン数設定 (5-20回の範囲)
3. 実行ボタンクリック
4. まとめ役が要約をUI上部に表示
5. その下で生徒と先生がストリーミングでQ&A開始
6. Q&A完了後、まとめ役が最終マークダウンを整形してUI表示

### 4.3 設定項目
- Q&Aターン数: 5-20回の範囲で事前設定
- ファイルアップロード: 単一PDFファイル

## 5. ディレクトリ構造

```
streamlit-ai-agents/
├── app.py                      # メインのStreamlitアプリ
├── requirements.txt            # 依存関係
├── config/
│   ├── __init__.py
│   └── settings.py            # API設定、アプリ設定等
├── prompts/                   # プロンプトのバージョン管理
│   ├── student/
│   │   ├── v1_0_0.ini
│   │   ├── v1_1_0.ini
│   │   └── latest.ini         # 現在使用中バージョンへのシンボリックリンク
│   ├── teacher/
│   │   ├── v1_0_0.ini
│   │   └── latest.ini
│   ├── summarizer/
│   │   ├── v1_0_0.ini
│   │   └── latest.ini
│   └── prompt_loader.py       # .iniファイル読み込みユーティリティ
├── agents/
│   ├── __init__.py
│   ├── base_agent.py          # 基底エージェントクラス
│   ├── student_agent.py       # 生徒役エージェント
│   ├── teacher_agent.py       # 先生役エージェント
│   └── summarizer_agent.py    # 要約・整形役エージェント
├── services/
│   ├── __init__.py
│   ├── pdf_processor.py       # PDF読み込み・前処理
│   ├── kernel_service.py      # SK初期化、LLM連携、オーケストレーション
│   ├── chat_manager.py        # チャット履歴管理
│   └── session_manager.py     # セッション状態管理
├── ui/
│   ├── __init__.py
│   ├── components.py          # 再利用可能なUIコンポーネント
│   ├── tabs.py               # タブ切り替えロジック
│   └── styles.py              # カスタムCSS
└── utils/
    ├── __init__.py
    ├── helpers.py             # ユーティリティ関数
    └── validators.py          # 入力検証
```

## 6. 処理フロー詳細

### 6.1 メイン処理シーケンス
1. **PDF読み込み・前処理**
   - テキストと画像の両方を抽出
   - GPT-5のVision機能で図表も処理対象に含める
2. **トークン数チェック・分割調整**
   - 250,000トークン制限内での動的調整
3. **要約エージェント実行**
   - まとめ役が文書全体を短く要約
   - UI上部に即座に表示
4. **文書セクション分割**
   - 設定されたQ&Aターン数に応じて均等分割
5. **Q&Aループ実行**
   - 各セクションから生徒が1問生成（順序通り）
   - 先生が回答生成
   - 専門度が閾値を超えた場合、フォローアップ質問（最大3回）
   - ストリーミング表示でリアルタイム進行
6. **最終整形エージェント実行**
   - まとめ役がQ&A内容を綺麗に整形
7. **マークダウンレポート生成・表示**
   - 最終タブにコンパイル済み表示
   - コピーボタン提供

### 6.2 フォローアップ質問制御
- **判定条件**: 先生の回答の専門度が設定閾値を超過
- **実行回数**: セクションあたり最大3回
- **発動タイミング**: 先生の回答直後に自動判定

### 6.3 図表処理
- **抽出方法**: PDFページを画像として抽出
- **送信方式**: テキスト + 画像の両方をGPT-5に送信
- **質問対象**: 図表説明も生徒の質問対象に含める

## 7. エラーハンドリング仕様

### 7.1 基本方針
- エラー発生時はエラーメッセージを表示
- ユーザーによる途中停止機能は開発優先度低

### 7.2 対象エラー
- **PDF読み込み失敗**: ファイル形式・破損等でエラーメッセージ表示
- **API制限到達**: OpenAI API制限時にエラーメッセージ表示
- **ファイルサイズ超過**: 50MB超過時の警告
- **トークン超過**: 250,000トークン超過時の自動調整または警告

## 8. プロンプト設計（仮版）

### 8.1 プロンプト管理方式
- **.ini形式**でプロンプトを管理
- **バージョン管理**対応（例: prompts/student/v1_0_0.ini）
- **latest.ini**で現在使用バージョンを指定

### 8.2 生徒エージェント用プロンプト (v1.0.0)
```ini
[system]
role = あなたは好奇心旺盛で知識欲の強い学生です

[personality]
curiosity = 非常に高い
knowledge_level = 専門的な知識がない初心者
question_style = 素直で率直
character = 参考書でよく見る生徒役のような存在
follow_up = 専門的な回答に対して更に詳しく聞きたがる

[instruction]
task = 与えられた文書の該当セクションについて、理解を深めるための質問を1つ生成してください
approach = 文書の順序に従って、重要なポイントや理解しにくい部分について質問してください
section_strategy = 各セクションから必ず1問は質問し、必要に応じてフォローアップ質問をしてください
```

### 8.3 先生エージェント用プロンプト (v1.0.0)
```ini
[system]
role = あらゆる分野に精通した専門家で教育者

[expertise]
scope = 全学術分野対応（どんな専門的な内容にも精通）
teaching_style = 丁寧でわかりやすい説明
depth = どんな質問にも答えてくれる専門家
response_style = 基礎から応用まで対応

[instruction]
task = 学生の質問に対して、正確でわかりやすい回答を提供してください
approach = 専門用語は必要に応じて解説し、具体例を交えて説明してください
detail_level = 質問の深度に応じて適切な専門レベルで回答してください
```

### 8.4 要約・整形エージェント用プロンプト (v1.0.0)
```ini
[system]
role = 文書の要約と情報整理の専門家

[responsibilities]
summary = 文書全体を短く要約する
qa_formatting = 生徒と先生の質問を綺麗に整形してまとめる
final_output = 最終的なマークダウン形式のアウトプットを生成する

[output_format]
summary_style = 簡潔で包括的な要約
qa_style = 読みやすく整理されたQ&A形式
final_report = 構造化されたマークダウン形式

[instruction]
task = 文書要約の生成とQ&A内容の整理・最終レポート作成
approach = 重要なポイントを抽出し、論理的な構造で情報を整理してください
formatting = マークダウン記法を使用して見やすい最終レポートを作成してください
```

## 9. 追加仕様・制約

### 9.1 ファイル制約
- **対応形式**: PDF のみ
- **最大サイズ**: 50MB
- **同時処理**: 1ファイルのみ

### 9.2 処理制約
- **トークン制限**: 250,000トークン以内での動的調整
- **Q&A回数**: 5-20回の範囲で設定可能
- **フォローアップ**: セクションあたり最大3回

### 9.3 出力仕様
- **表示方式**: タブ切り替えによる段階的表示
- **最終出力**: マークダウンレンダリング + コピー機能
- **ストリーミング**: リアルタイムQ&A表示